name: Generar funcionalidad desde historia de usuario

on:
  push:
    paths:
      - 'historias-usuario/**/*.yml'
      - 'postman/api_collection.json'
      - 'diseno/**/*.json'

jobs:
  generar_codigo:
    runs-on: ubuntu-latest

    steps:
      - name: Clonar repositorio actual
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GH_PAT }}
          path: repositorio-base

      - name: Detectar historia de usuario modificada
        id: historia
        run: |
          cd repositorio-base
          git fetch --unshallow || true
          base_sha="${{ github.event.before }}"
          if ! git cat-file -e "$base_sha"^{commit} 2>/dev/null; then
            echo "⚠️ SHA base no válido o sin historial, usando HEAD^"
            base_sha="HEAD^"
          fi
          echo "🔍 Comparando con base: $base_sha"
          archivo=$(git diff --name-only "$base_sha" HEAD | grep '^historias-usuario/.*\.yml$' | head -n 1 || true)
          if [ -z "$archivo" ]; then
            echo "⛔ No se encontró ninguna historia de usuario modificada. Abortando."
            exit 1
          fi
          echo "ruta=$archivo" >> "$GITHUB_OUTPUT"
          echo "base=$base_sha" >> "$GITHUB_OUTPUT"

      - name: Leer contenido de historia de usuario
        run: |
          cd repositorio-base
          echo "📝 Historia detectada: ${{ steps.historia.outputs.ruta }}"
          cat "${{ steps.historia.outputs.ruta }}" > entrada_gpt.txt

      - name: Leer colección Postman
        run: |
          cd repositorio-base
          if [ ! -f "postman/api_collection.json" ]; then
            echo "⛔ Archivo postman/api_collection.json no encontrado. Abortando."
            exit 1
          fi
          echo "📦 API Postman detectada"
          cp postman/api_collection.json entrada_api.json

      - name: Detectar y copiar diseño JSON
        id: diseno
        run: |
          cd repositorio-base
          diseno=$(find diseno -name '*.json' | sort | head -n 1)
          if [ -z "$diseno" ]; then
            echo "⛔ No se encontró ningún archivo de diseño en la carpeta 'diseno'. Abortando."
            exit 1
          fi
          echo "🎨 Diseño encontrado: $diseno"
          cat "$diseno" > entrada_diseno.json

      - name: Detectar y listar componentes Angular existentes
        id: listar_componentes
        run: |
          cd repositorio-base

          echo "📦 Buscando componentes Angular existentes..."

          lista=$(find src/app -type f \( -name "*.component.ts" -o -name "*.component.html" -o -name "*.service.ts" \) | sort)

          if [ -z "$lista" ]; then
            echo "⚠️ No se encontraron componentes existentes."
          else
            echo "🧩 Componentes encontrados:"
            echo "$lista"
            echo "$lista" > componentes_existentes.txt
          fi

      - name: Analizar historias de usuario y determinar APIs utilizables
        run: |
          cd repositorio-base
      
          echo "📌 Preparando análisis de APIs disponibles para las historias de usuario..."
      
          echo -e "\n\n--- HISTORIA DE USUARIO ---" > prompt_apis.txt
          cat entrada_gpt.txt >> prompt_apis.txt
      
          echo -e "\n\n--- ESPECIFICACIÓN API POSTMAN ---" >> prompt_apis.txt
          cat entrada_api.json >> prompt_apis.txt
      
          echo -e "\n\n--- INSTRUCCIONES ---" >> prompt_apis.txt
          cat <<'EOF' >> prompt_apis.txt
      
          Tu tarea es analizar cada historia de usuario y determinar si puede ser implementada usando alguno de los endpoints definidos en la colección Postman (API REST).
          
          Para cada historia:
          - Indica si hay uno o más endpoints que la cubran.
          - Si sí, especifica:
            - Método (GET, POST, etc.)
            - Ruta
            - Parámetros requeridos
            - Observaciones (si necesita filtros, transformaciones, etc.)
          - Si no hay cobertura adecuada, indícalo claramente.
          
          Entrega los resultados en tabla Markdown:
          
          | Historia | Método | Endpoint | Parámetros | Cobertura | Observación |
          |----------|--------|----------|------------|-----------|-------------|
          EOF
      
          echo "📄 Contenido del prompt para APIs:"
          cat prompt_apis.txt
      
          jq -Rs --arg SYSTEM_MSG "Eres un analista funcional que trabaja con colecciones Postman y HDUs." '{
            model: "gpt-4",
            messages: [
              { "role": "system", "content": $SYSTEM_MSG },
              { "role": "user", "content": . }
            ],
            temperature: 0.2
          }' prompt_apis.txt > payload_apis.json
      
          echo "📄 Payload para OpenAI:"
          cat payload_apis.json
      
          curl -s https://api.openai.com/v1/chat/completions \
            -H "Authorization: Bearer $OPENAI_API_KEY" \
            -H "Content-Type: application/json" \
            -d @payload_apis.json > respuesta_apis.json
      
          echo "📨 Respuesta cruda:"
          cat respuesta_apis.json
      
          # Validación segura
          ANALISIS=$(jq -r '.choices[0].message.content // empty' respuesta_apis.json)
          if [ -z "$ANALISIS" ]; then
            echo "❌ No se recibió análisis válido de APIs."
            exit 1
          fi
          echo "$ANALISIS" > analisis_apis.txt
      
      - name: Mostrar análisis de APIs
        run: |
          echo "📋 Tabla de análisis de cobertura de APIs:"
          cat repositorio-base/analisis_apis.txt
      
      - name: Diagnóstico de componentes Angular (usando APIs mapeadas)
        run: |
          cd repositorio-base
      
          # Asegura archivo aunque esté vacío
          if [ ! -f componentes_existentes.txt ]; then
            echo "⚠️ No existe 'componentes_existentes.txt'. Asumiendo que no hay componentes aún."
            echo "(sin componentes disponibles)" > componentes_existentes.txt
          fi
      
          echo "📦 Diagnóstico de componentes basado en APIs ya mapeadas..."
      
          echo -e "\n\n--- HISTORIA DE USUARIO ---" > prompt_componentes.txt
          cat entrada_gpt.txt >> prompt_componentes.txt
      
          echo -e "\n\n--- ANÁLISIS DE APIs DISPONIBLES ---" >> prompt_componentes.txt
          cat analisis_apis.txt >> prompt_componentes.txt
      
          echo -e "\n\n--- COMPONENTES EXISTENTES ---" >> prompt_componentes.txt
          cat componentes_existentes.txt >> prompt_componentes.txt
      
          echo -e "\n\n--- INSTRUCCIONES ---" >> prompt_componentes.txt
          cat <<'EOF' >> prompt_componentes.txt
      
          Tu tarea es analizar qué componentes y servicios Angular deben usarse para implementar las historias de usuario, según el análisis previo de APIs.
          
          Entrega una tabla Markdown:
          
          | Archivo Angular | Tipo | Clasificación | API a usar | Método | Endpoint | Motivo |
          |------------------|------|----------------|------------|--------|----------|--------|
          
          Si no hay componentes existentes, asume que deben crearse todos desde cero. NO generes código todavía.
          EOF
      
          echo "📄 Contenido del prompt para diagnóstico:"
          cat prompt_componentes.txt
      
          jq -Rs --arg SYSTEM_MSG "Eres un arquitecto frontend Angular. Usa solo la información provista." '{
            model: "gpt-4",
            messages: [
              { "role": "system", "content": $SYSTEM_MSG },
              { "role": "user", "content": . }
            ],
            temperature: 0.2
          }' prompt_componentes.txt > payload_componentes.json
      
          echo "📄 Payload para OpenAI:"
          cat payload_componentes.json
      
          curl -s https://api.openai.com/v1/chat/completions \
            -H "Authorization: Bearer $OPENAI_API_KEY" \
            -H "Content-Type: application/json" \
            -d @payload_componentes.json > respuesta_componentes.json
      
          echo "📨 Respuesta cruda:"
          cat respuesta_componentes.json
      
          DIAGNOSTICO=$(jq -r '.choices[0].message.content // empty' respuesta_componentes.json)
          if [ -z "$DIAGNOSTICO" ]; then
            echo "❌ No se recibió diagnóstico válido de componentes."
            exit 1
          fi
          echo "$DIAGNOSTICO" > diagnostico_componentes.txt
            
      - name: Mostrar diagnóstico de componentes
        run: |
          echo "📋 Diagnóstico generado por GPT:"
          cat repositorio-base/diagnostico_componentes.txt
      
name: Generar funcionalidad desde historia de usuario

on:
  push:
    paths:
      - 'historias-usuario/**/*.yml'
      - 'postman/api_collection.json'
      - 'diseno/**/*.json'

jobs:
  generar_codigo:
    runs-on: ubuntu-latest
    env:
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

    steps:
      - name: Clonar repositorio actual
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GH_PAT }}
          path: repositorio-base

      - name: Detectar historia de usuario modificada
        id: historia
        run: |
          cd repositorio-base
          git fetch --unshallow || true
          base_sha="${{ github.event.before }}"
          if ! git cat-file -e "$base_sha"^{commit} 2>/dev/null; then
            echo "‚ö†Ô∏è SHA base no v√°lido o sin historial, usando HEAD^"
            base_sha="HEAD^"
          fi
          echo "üîç Comparando con base: $base_sha"
          archivo=$(git diff --name-only "$base_sha" HEAD | grep '^historias-usuario/.*\.yml$' | head -n 1 || true)
          if [ -z "$archivo" ]; then
            echo "‚õî No se encontr√≥ ninguna historia de usuario modificada. Abortando."
            exit 1
          fi
          echo "ruta=$archivo" >> "$GITHUB_OUTPUT"
          echo "base=$base_sha" >> "$GITHUB_OUTPUT"

      - name: Leer contenido de historia de usuario
        run: |
          cd repositorio-base
          echo "üìù Historia detectada: ${{ steps.historia.outputs.ruta }}"
          cat "${{ steps.historia.outputs.ruta }}" > entrada_gpt.txt

      - name: Leer colecci√≥n Postman
        run: |
          cd repositorio-base
          if [ ! -f "postman/api_collection.json" ]; then
            echo "‚õî Archivo postman/api_collection.json no encontrado. Abortando."
            exit 1
          fi
          echo "üì¶ API Postman detectada"
          cp postman/api_collection.json entrada_api.json

      - name: Detectar y copiar dise√±o JSON
        id: diseno
        run: |
          cd repositorio-base
          diseno=$(find diseno -name '*.json' | sort | head -n 1)
          if [ -z "$diseno" ]; then
            echo "‚õî No se encontr√≥ ning√∫n archivo de dise√±o en la carpeta 'diseno'. Abortando."
            exit 1
          fi
          echo "üé® Dise√±o encontrado: $diseno"
          cat "$diseno" > entrada_diseno.json

      - name: Detectar y listar componentes Angular existentes
        id: listar_componentes
        run: |
          cd repositorio-base

          echo "üì¶ Buscando componentes Angular existentes..."

          lista=$(find src/app -type f \( -name "*.component.ts" -o -name "*.component.html" -o -name "*.service.ts" \) | sort)

          if [ -z "$lista" ]; then
            echo "‚ö†Ô∏è No se encontraron componentes existentes."
          else
            echo "üß© Componentes encontrados:"
            echo "$lista"
            echo "$lista" > componentes_existentes.txt
          fi

      - name: Verificar que OPENAI_API_KEY est√° disponible
        run: |
          if [ -z "$OPENAI_API_KEY" ]; then
            echo "‚ùå OPENAI_API_KEY no est√° definida. Revisa los secretos del repositorio."
            exit 1
          else
            echo "‚úÖ OPENAI_API_KEY presente con longitud: ${#OPENAI_API_KEY}"
          fi

      - name: Analizar historias de usuario y determinar APIs utilizables
        run: |
          cd repositorio-base

          echo "üìå Preparando an√°lisis de APIs disponibles para las historias de usuario..."

          echo -e "\n\n--- HISTORIA DE USUARIO ---" > prompt_apis.txt
          cat entrada_gpt.txt >> prompt_apis.txt

          echo -e "\n\n--- ESPECIFICACI√ìN API POSTMAN ---" >> prompt_apis.txt
          cat entrada_api.json >> prompt_apis.txt

          echo -e "\n\n--- INSTRUCCIONES ---" >> prompt_apis.txt
          cat <<'EOF' >> prompt_apis.txt

          Tu tarea es analizar cada historia de usuario y determinar si puede ser implementada usando alguno de los endpoints definidos en la colecci√≥n Postman (API REST).

          Para cada historia:
          - Indica si hay uno o m√°s endpoints que la cubran.
          - Si s√≠, especifica:
            - M√©todo (GET, POST, etc.)
            - Ruta
            - Par√°metros requeridos
            - Observaciones (si necesita filtros, transformaciones, etc.)
          - Si no hay cobertura adecuada, ind√≠calo claramente.

          Entrega los resultados en tabla Markdown:

          | Historia | M√©todo | Endpoint | Par√°metros | Cobertura | Observaci√≥n |
          |----------|--------|----------|------------|-----------|-------------|
          EOF

          jq -Rs --arg SYSTEM_MSG "Eres un analista funcional que trabaja con colecciones Postman y HDUs." '{
            model: "gpt-4",
            messages: [
              { "role": "system", "content": $SYSTEM_MSG },
              { "role": "user", "content": . }
            ],
            temperature: 0.2
          }' prompt_apis.txt > payload_apis.json

          curl -s https://api.openai.com/v1/chat/completions \
            -H "Authorization: Bearer $OPENAI_API_KEY" \
            -H "Content-Type: application/json" \
            -d @payload_apis.json > respuesta_apis.json

          ANALISIS=$(jq -r '.choices[0].message.content // empty' respuesta_apis.json)
          if [ -z "$ANALISIS" ]; then
            echo "‚ùå No se recibi√≥ an√°lisis v√°lido de APIs."
            exit 1
          fi
          echo "$ANALISIS" > analisis_apis.txt

      - name: Mostrar an√°lisis de APIs
        run: |
          echo "üìã Tabla de an√°lisis de cobertura de APIs:"
          cat repositorio-base/analisis_apis.txt

      - name: Diagn√≥stico de componentes Angular (usando APIs mapeadas)
        run: |
          cd repositorio-base

          if [ ! -f componentes_existentes.txt ]; then
            echo "‚ö†Ô∏è No existe 'componentes_existentes.txt'. Asumiendo que no hay componentes a√∫n."
            echo "(sin componentes disponibles)" > componentes_existentes.txt
          fi

          echo "üì¶ Diagn√≥stico de componentes basado en APIs ya mapeadas..."

          echo -e "\n\n--- HISTORIA DE USUARIO ---" > prompt_componentes.txt
          cat entrada_gpt.txt >> prompt_componentes.txt

          echo -e "\n\n--- AN√ÅLISIS DE APIs DISPONIBLES ---" >> prompt_componentes.txt
          cat analisis_apis.txt >> prompt_componentes.txt

          echo -e "\n\n--- COMPONENTES EXISTENTES ---" >> prompt_componentes.txt
          cat componentes_existentes.txt >> prompt_componentes.txt

          echo -e "\n\n--- INSTRUCCIONES ---" >> prompt_componentes.txt
          cat <<'EOF' >> prompt_componentes.txt

          Tu tarea es analizar qu√© componentes y servicios Angular deben usarse para implementar las historias de usuario, seg√∫n el an√°lisis previo de APIs.

          Entrega una tabla Markdown:

          | Archivo Angular | Tipo | Clasificaci√≥n | API a usar | M√©todo | Endpoint | Motivo |
          |------------------|------|----------------|------------|--------|----------|--------|

          Si no hay componentes existentes, asume que deben crearse todos desde cero. NO generes c√≥digo todav√≠a.
          EOF

          jq -Rs --arg SYSTEM_MSG "Eres un arquitecto frontend Angular. Usa solo la informaci√≥n provista." '{
            model: "gpt-4",
            messages: [
              { "role": "system", "content": $SYSTEM_MSG },
              { "role": "user", "content": . }
            ],
            temperature: 0.2
          }' prompt_componentes.txt > payload_componentes.json

          curl -s https://api.openai.com/v1/chat/completions \
            -H "Authorization: Bearer $OPENAI_API_KEY" \
            -H "Content-Type: application/json" \
            -d @payload_componentes.json > respuesta_componentes.json

          DIAGNOSTICO=$(jq -r '.choices[0].message.content // empty' respuesta_componentes.json)
          if [ -z "$DIAGNOSTICO" ]; then
            echo "‚ùå No se recibi√≥ diagn√≥stico v√°lido de componentes."
            exit 1
          fi
          echo "$DIAGNOSTICO" > diagnostico_componentes.txt

      - name: Mostrar diagn√≥stico de componentes
        run: |
          cd repositorio-base
          echo "üìã Diagn√≥stico generado por GPT:"
          cat diagnostico_componentes.txt

      - name: Generar prompt para creaci√≥n de c√≥digo Angular
        run: |
          cd repositorio-base

          echo "üìå Preparando prompt para generaci√≥n de c√≥digo Angular..."

          echo -e "\n\n--- HISTORIA DE USUARIO ---" > prompt_codigo.txt
          cat entrada_gpt.txt >> prompt_codigo.txt

          echo -e "\n\n--- AN√ÅLISIS DE APIs DISPONIBLES ---" >> prompt_codigo.txt
          cat analisis_apis.txt >> prompt_codigo.txt

          echo -e "\n\n--- DIAGN√ìSTICO DE COMPONENTES ---" >> prompt_codigo.txt
          cat diagnostico_componentes.txt >> prompt_codigo.txt

          echo -e "\n\n--- DISE√ëO VISUAL / UI / ESTILOS ---" >> prompt_codigo.txt
          cat entrada_diseno.json >> prompt_codigo.txt

          echo -e "\n\n--- INSTRUCCIONES ---" >> prompt_codigo.txt
          cat <<'EOF' >> prompt_codigo.txt

          Eres un generador de c√≥digo Angular experto.

          Tu tarea es crear los siguientes artefactos de frontend Angular seg√∫n los insumos entregados:
          - Las historias de usuario
          - El an√°lisis de cobertura API
          - El diagn√≥stico de componentes existentes y nuevos
          - El dise√±o visual (estructura, etiquetas, nombres, estilos)

          Para cada componente indicado como "NUEVO" o "MODIFICABLE":
          - Genera el archivo TypeScript (.ts)
          - Genera el archivo de plantilla HTML (.html) usando los elementos, clases y estructuras sugeridas en el dise√±o
          - Genera el archivo de estilos CSS o SCSS si aplica, alineado con el dise√±o
          - Aseg√∫rate de que los servicios llamen al endpoint apropiado indicado en el an√°lisis de API
          - No modifiques los componentes clasificados como "REUTILIZABLE-AS-IS"
          - Respeta la arquitectura Angular standalone (sin m√≥dulos)
          - Cada archivo debe ir envuelto entre delimitadores como:
            === archivo: ruta/archivo.component.ts ===
            ...contenido...
            === archivo: ruta/archivo.component.html ===
            ...contenido...

          No incluyas explicaciones. Solo el c√≥digo limpio de cada archivo. 
          EOF

      - name: Llamar a OpenAI para generar c√≥digo Angular
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          cd repositorio-base

          echo "üì® Enviando prompt a OpenAI para generaci√≥n de c√≥digo Angular..."

          jq -Rs --arg SYSTEM_MSG "Eres un generador experto de aplicaciones Angular. Devuelve √∫nicamente c√≥digo v√°lido, sin explicaciones." '{
            model: "gpt-4",
            messages: [
              { "role": "system", "content": $SYSTEM_MSG },
              { "role": "user", "content": . }
            ],
            temperature: 0.2
          }' prompt_codigo.txt > payload_codigo.json

          echo "üì§ Payload construido, enviando a OpenAI..."

          curl -s https://api.openai.com/v1/chat/completions \
            -H "Authorization: Bearer $OPENAI_API_KEY" \
            -H "Content-Type: application/json" \
            -d @payload_codigo.json > respuesta_codigo.json

          echo "üì• Respuesta recibida."

          RESULTADO=$(jq -r '.choices[0].message.content // empty' respuesta_codigo.json)

          if [ -z "$RESULTADO" ]; then
            echo "‚ùå No se recibi√≥ c√≥digo v√°lido desde OpenAI."
            exit 1
          fi

          echo "$RESULTADO" > codigo_angular_generado.txt

          echo "‚úÖ C√≥digo generado guardado en 'codigo_angular_generado.txt'"

      - name: Mostrar c√≥digo generado
        run: |
          echo "üì¶ C√≥digo Angular generado:"
          cat repositorio-base/codigo_angular_generado.txt

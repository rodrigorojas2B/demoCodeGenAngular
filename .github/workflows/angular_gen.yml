name: Generar funcionalidad desde historia de usuario

on:
  push:
    paths:
      - 'historias-usuario/**/*.yml'
      - 'postman/api_collection.json'
      - 'diseno/**/*.json'

jobs:
  generar_codigo:
    runs-on: ubuntu-latest

    steps:
      - name: Clonar repositorio actual
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GH_PAT }}
          path: repositorio-base

      - name: Detectar historia de usuario modificada
        id: historia
        run: |
          cd repositorio-base
          git fetch --unshallow || true
          base_sha="${{ github.event.before }}"
          if ! git cat-file -e "$base_sha"^{commit} 2>/dev/null; then
            echo "‚ö†Ô∏è SHA base no v√°lido o sin historial, usando HEAD^"
            base_sha="HEAD^"
          fi
          echo "üîç Comparando con base: $base_sha"
          archivo=$(git diff --name-only "$base_sha" HEAD | grep '^historias-usuario/.*\.yml$' | head -n 1 || true)
          if [ -z "$archivo" ]; then
            echo "‚õî No se encontr√≥ ninguna historia de usuario modificada. Abortando."
            exit 1
          fi
          echo "ruta=$archivo" >> "$GITHUB_OUTPUT"
          echo "base=$base_sha" >> "$GITHUB_OUTPUT"

      - name: Leer contenido de historia de usuario
        run: |
          cd repositorio-base
          echo "üìù Historia detectada: ${{ steps.historia.outputs.ruta }}"
          cat "${{ steps.historia.outputs.ruta }}" > entrada_gpt.txt

      - name: Leer colecci√≥n Postman
        run: |
          cd repositorio-base
          if [ ! -f "postman/api_collection.json" ]; then
            echo "‚õî Archivo postman/api_collection.json no encontrado. Abortando."
            exit 1
          fi
          echo "üì¶ API Postman detectada"
          cp postman/api_collection.json entrada_api.json

      - name: Detectar y copiar dise√±o JSON
        id: diseno
        run: |
          cd repositorio-base
          diseno=$(find diseno -name '*.json' | sort | head -n 1)
          if [ -z "$diseno" ]; then
            echo "‚õî No se encontr√≥ ning√∫n archivo de dise√±o en la carpeta 'diseno'. Abortando."
            exit 1
          fi
          echo "üé® Dise√±o encontrado: $diseno"
          cat "$diseno" > entrada_diseno.json

      - name: Detectar y listar componentes Angular existentes
        id: listar_componentes
        run: |
          cd repositorio-base

          echo "üì¶ Buscando componentes Angular existentes..."

          lista=$(find src/app -type f \( -name "*.component.ts" -o -name "*.component.html" -o -name "*.service.ts" \) | sort)

          if [ -z "$lista" ]; then
            echo "‚ö†Ô∏è No se encontraron componentes existentes."
          else
            echo "üß© Componentes encontrados:"
            echo "$lista"
            echo "$lista" > componentes_existentes.txt
          fi

      - name: Indexar componentes Angular y construir prompt
        run: |
          cd repositorio-base
      
          echo "üìÅ Buscando componentes Angular..."
          find src/app -type f \( -name "*.component.ts" -o -name "*.component.html" -o -name "*.service.ts" \) | sort > componentes_existentes.txt
      
          if [ ! -s componentes_existentes.txt ]; then
            echo "‚ö†Ô∏è No se encontraron componentes o servicios existentes. Se asumir√° que todo debe ser creado desde cero."
            echo "(sin componentes disponibles)" > componentes_existentes.txt
          else
            echo "üß© Componentes detectados:"
            cat componentes_existentes.txt
          fi
      
          echo -e "\n\n--- HISTORIA DE USUARIO ---" > prompt_gpt.txt
          cat entrada_gpt.txt >> prompt_gpt.txt
      
          echo -e "\n\n--- ESPECIFICACI√ìN API POSTMAN ---" >> prompt_gpt.txt
          cat entrada_api.json >> prompt_gpt.txt
      
          echo -e "\n\n--- COMPONENTES EXISTENTES ---" >> prompt_gpt.txt
          cat componentes_existentes.txt >> prompt_gpt.txt
      
          echo -e "\n\n--- INSTRUCCIONES DE DIAGN√ìSTICO ---" >> prompt_gpt.txt
          cat <<'EOF' >> prompt_gpt.txt
      
          Eres un experto en desarrollo Angular. A continuaci√≥n se presentan:
          1. Una historia de usuario
          2. Una especificaci√≥n de API REST (formato Postman)
          3. Un listado de componentes y servicios existentes
          
          Tu tarea es:
          - Analizar qu√© componentes pueden ser REUTILIZADOS AS-IS
          - Cu√°les deben ser MODIFICADOS, y por qu√©
          - Qu√© NUEVOS componentes o servicios deben crearse
          - Presentar tu an√°lisis en una tabla Markdown con las columnas:
          
          | Archivo | Tipo | Clasificaci√≥n | Motivo |
          |---------|------|----------------|--------|
          | empleados.component.ts | componente | REUTILIZABLE-AS-IS | Ya implementa lista con filtros |
          | empleado.service.ts | servicio | MODIFICABLE | Debe incorporar m√©todo POST /api/empleados |
          | consulta-empleados.component.ts | componente | NUEVO | P√°gina principal para listar empleados |
          
          Si no hay componentes disponibles, indica que todos deben ser NUEVOS.
          No inventes nombres si no est√°n justificados por la historia y la API.
          No generes c√≥digo a√∫n, solo an√°lisis.
          EOF
      
        
      - name: Llamar a OpenAI para diagn√≥stico de componentes
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          cd repositorio-base
      
          jq -Rs --arg SYSTEM_MSG "Eres un analista Angular. Usa solo los archivos entregados. No inventes componentes no listados. No generes c√≥digo a√∫n." '{
            model: "gpt-4",
            messages: [
              { "role": "system", "content": $SYSTEM_MSG },
              { "role": "user", "content": . }
            ],
            temperature: 0.2
          }' entrada_gpt.txt > payload_diagnostico.json
      
          curl -s https://api.openai.com/v1/chat/completions \
            -H "Authorization: Bearer $OPENAI_API_KEY" \
            -H "Content-Type: application/json" \
            -d @payload_diagnostico.json > respuesta_gpt_diagnostico.json
      
          jq -r '.choices[0].message.content // "‚ùå GPT no devolvi√≥ contenido v√°lido."' respuesta_gpt_diagnostico.json > diagnostico_gpt.txt
            
      - name: Mostrar an√°lisis GPT
        run: |
          echo "üìã Tabla de diagn√≥stico de componentes Angular:"
          if [ -s repositorio-base/diagnostico_gpt.txt ]; then
            cat repositorio-base/diagnostico_gpt.txt
          else
            echo "‚ö†Ô∏è El archivo de diagn√≥stico est√° vac√≠o o no se gener√≥."
            ls -l repositorio-base/
          fi
        
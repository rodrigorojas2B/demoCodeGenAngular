name: Generar funcionalidad desde historia de usuario

on:
  push:
    branches:
      - main
    paths:
      - 'historias-usuario/**/*.yml'


jobs:
  generar_codigo:
    runs-on: ubuntu-latest
    env:
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

    steps:
      - name: Clonar repositorio actual
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GH_PAT }}
          path: repositorio-base

      - name: Detectar carpeta base del proyecto Angular
        id: detectar_app
        run: |
          cd repositorio-base
          APP_DIR=$(find . -type f -name 'angular.json' | head -n 1 | xargs dirname | sed 's|^./||')
          if [ -z "$APP_DIR" ]; then
            echo "‚õî No se pudo detectar carpeta del proyecto Angular. Abortando."
            exit 1
          fi
          echo "üìÅ Proyecto Angular detectado: $APP_DIR"
          echo "appdir=$APP_DIR" >> $GITHUB_OUTPUT

      - name: Detectar historia de usuario modificada
        id: historia
        run: |
          cd repositorio-base
          git fetch --unshallow || true
          base_sha="${{ github.event.before }}"
          if ! git cat-file -e "$base_sha"^{commit} 2>/dev/null; then
            echo "‚ö†Ô∏è SHA base no v√°lido o sin historial, usando HEAD^"
            base_sha="HEAD^"
          fi
          echo "üîç Comparando con base: $base_sha"
          archivo=$(git diff --name-only "$base_sha" HEAD | grep '^historias-usuario/.*\.yml$' | head -n 1 || true)
          if [ -z "$archivo" ]; then
            echo "‚õî No se encontr√≥ ninguna historia de usuario modificada. Abortando."
            exit 1
          fi
          echo "ruta=$archivo" >> "$GITHUB_OUTPUT"
          echo "base=$base_sha" >> "$GITHUB_OUTPUT"

      - name: Leer contenido de historia de usuario
        run: |
          cd repositorio-base
          echo "üìù Historia detectada: ${{ steps.historia.outputs.ruta }}"
          cat "${{ steps.historia.outputs.ruta }}" > entrada_gpt.txt

      - name: Leer colecci√≥n Postman
        run: |
          cd repositorio-base
          if [ ! -f "postman/api_collection.json" ]; then
            echo "‚õî Archivo postman/api_collection.json no encontrado. Abortando."
            exit 1
          fi
          echo "üì¶ API Postman detectada"
          cp postman/api_collection.json entrada_api.json

      - name: Detectar y copiar dise√±o JSON
        id: diseno
        run: |
          cd repositorio-base
          diseno=$(find diseno -name '*.json' | sort | head -n 1)
          if [ -z "$diseno" ]; then
            echo "‚õî No se encontr√≥ ning√∫n archivo de dise√±o en la carpeta 'diseno'. Abortando."
            exit 1
          fi
          echo "üé® Dise√±o encontrado: $diseno"
          cat "$diseno" > entrada_diseno.json

      - name: Detectar y listar componentes Angular existentes
        id: listar_componentes
        run: |
          cd repositorio-base

          echo "üì¶ Buscando componentes Angular existentes..."

          lista=$(find src/app -type f \( -name "*.component.ts" -o -name "*.component.html" -o -name "*.service.ts" \) | sort)

          if [ -z "$lista" ]; then
            echo "‚ö†Ô∏è No se encontraron componentes existentes."
          else
            echo "üß© Componentes encontrados:"
            echo "$lista"
            echo "$lista" > componentes_existentes.txt
          fi

      - name: Verificar que OPENAI_API_KEY est√° disponible
        run: |
          if [ -z "$OPENAI_API_KEY" ]; then
            echo "‚ùå OPENAI_API_KEY no est√° definida. Revisa los secretos del repositorio."
            exit 1
          else
            echo "‚úÖ OPENAI_API_KEY presente con longitud: ${#OPENAI_API_KEY}"
          fi

      - name: Analizar historias de usuario y determinar APIs utilizables
        run: |
          cd repositorio-base

          echo "üìå Preparando an√°lisis de APIs disponibles para las historias de usuario..."

          echo -e "\n\n--- HISTORIA DE USUARIO ---" > prompt_apis.txt
          cat entrada_gpt.txt >> prompt_apis.txt

          echo -e "\n\n--- ESPECIFICACI√ìN API POSTMAN ---" >> prompt_apis.txt
          cat entrada_api.json >> prompt_apis.txt

          echo -e "\n\n--- INSTRUCCIONES ---" >> prompt_apis.txt
          cat <<'EOF' >> prompt_apis.txt

          Tu tarea es analizar cada historia de usuario y determinar si puede ser implementada usando alguno de los endpoints definidos en la colecci√≥n Postman (API REST).

          Para cada historia:
          - Indica si hay uno o m√°s endpoints que la cubran.
          - Si s√≠, especifica:
            - M√©todo (GET, POST, etc.)
            - Ruta
            - Par√°metros requeridos
            - Observaciones (si necesita filtros, transformaciones, etc.)
          - Si no hay cobertura adecuada, ind√≠calo claramente.

          Entrega los resultados en tabla Markdown:

          | Historia | M√©todo | Endpoint | Par√°metros | Cobertura | Observaci√≥n |
          |----------|--------|----------|------------|-----------|-------------|
          EOF

          jq -Rs --arg SYSTEM_MSG "Eres un analista funcional que trabaja con colecciones Postman y HDUs." '{
            model: "gpt-4",
            messages: [
              { "role": "system", "content": $SYSTEM_MSG },
              { "role": "user", "content": . }
            ],
            temperature: 0.2
          }' prompt_apis.txt > payload_apis.json

          curl -s https://api.openai.com/v1/chat/completions \
            -H "Authorization: Bearer $OPENAI_API_KEY" \
            -H "Content-Type: application/json" \
            -d @payload_apis.json > respuesta_apis.json

          ANALISIS=$(jq -r '.choices[0].message.content // empty' respuesta_apis.json)
          if [ -z "$ANALISIS" ]; then
            echo "‚ùå No se recibi√≥ an√°lisis v√°lido de APIs."
            exit 1
          fi
          echo "$ANALISIS" > analisis_apis.txt

      - name: Mostrar an√°lisis de APIs
        run: |
          echo "üìã Tabla de an√°lisis de cobertura de APIs:"
          cat repositorio-base/analisis_apis.txt

      - name: Diagn√≥stico de componentes Angular (usando APIs mapeadas)
        run: |
          cd repositorio-base

          if [ ! -f componentes_existentes.txt ]; then
            echo "‚ö†Ô∏è No existe 'componentes_existentes.txt'. Asumiendo que no hay componentes a√∫n."
            echo "(sin componentes disponibles)" > componentes_existentes.txt
          fi

          echo "üì¶ Diagn√≥stico de componentes basado en APIs ya mapeadas..."

          echo -e "\n\n--- HISTORIA DE USUARIO ---" > prompt_componentes.txt
          cat entrada_gpt.txt >> prompt_componentes.txt

          echo -e "\n\n--- AN√ÅLISIS DE APIs DISPONIBLES ---" >> prompt_componentes.txt
          cat analisis_apis.txt >> prompt_componentes.txt

          echo -e "\n\n--- COMPONENTES EXISTENTES ---" >> prompt_componentes.txt
          cat componentes_existentes.txt >> prompt_componentes.txt

          echo -e "\n\n--- INSTRUCCIONES ---" >> prompt_componentes.txt
          cat <<'EOF' >> prompt_componentes.txt

          Tu tarea es analizar qu√© componentes y servicios Angular deben usarse para implementar las historias de usuario, seg√∫n el an√°lisis previo de APIs.

          Entrega una tabla Markdown:

          | Archivo Angular | Tipo | Clasificaci√≥n | API a usar | M√©todo | Endpoint | Motivo |
          |------------------|------|----------------|------------|--------|----------|--------|

          Si no hay componentes existentes, asume que deben crearse todos desde cero. NO generes c√≥digo todav√≠a.
          EOF

          jq -Rs --arg SYSTEM_MSG "Eres un arquitecto frontend Angular. Usa solo la informaci√≥n provista." '{
            model: "gpt-4",
            messages: [
              { "role": "system", "content": $SYSTEM_MSG },
              { "role": "user", "content": . }
            ],
            temperature: 0.2
          }' prompt_componentes.txt > payload_componentes.json

          curl -s https://api.openai.com/v1/chat/completions \
            -H "Authorization: Bearer $OPENAI_API_KEY" \
            -H "Content-Type: application/json" \
            -d @payload_componentes.json > respuesta_componentes.json

          DIAGNOSTICO=$(jq -r '.choices[0].message.content // empty' respuesta_componentes.json)
          if [ -z "$DIAGNOSTICO" ]; then
            echo "‚ùå No se recibi√≥ diagn√≥stico v√°lido de componentes."
            exit 1
          fi
          echo "$DIAGNOSTICO" > diagnostico_componentes.txt

      - name: Mostrar diagn√≥stico de componentes
        run: |
          cd repositorio-base
          echo "üìã Diagn√≥stico generado por GPT:"
          cat diagnostico_componentes.txt

      - name: Generar prompt para creaci√≥n de c√≥digo TypeScript (TS + pruebas unitarias)
        run: |
          cd repositorio-base

          echo -e "\n--- HISTORIA DE USUARIO ---" >> prompt_ts.txt
          cat entrada_gpt.txt >> prompt_ts.txt
      
          echo -e "\n--- AN√ÅLISIS DE APIs DISPONIBLES ---" >> prompt_ts.txt
          cat analisis_apis.txt >> prompt_ts.txt
      
          echo -e "\n--- COMPONENTES Y SERVICIOS A GENERAR (extra√≠dos del diagn√≥stico) ---" >> prompt_ts.txt
          awk -F'|' '
            NR==1 { next }
            {
              tipo=tolower($2)
              archivo=$1
              clasificacion=$3
              metodo=$5
              endpoint=$6
              motivo=$7
              printf "\nComponente:\n- Archivo: %s\n- Tipo: %s\n- Clasificaci√≥n: %s\n- M√©todo: %s\n- Endpoint: %s\n- Motivo: %s\n", archivo, tipo, clasificacion, metodo, endpoint, motivo
            }
          ' diagnostico_componentes.txt >> prompt_ts.txt

      
          echo -e "\n--- INSTRUCCIONES ---" >> prompt_ts.txt
          cat <<'EOF' >> prompt_ts.txt
      
          Eres un generador de c√≥digo Angular experto.
          
          Para **cada entrada listada en la secci√≥n anterior**, debes generar exactamente los siguientes archivos:
          
          - El archivo `.ts` con la l√≥gica del componente o servicio.
          - El archivo `.spec.ts` con pruebas unitarias completas (verificaci√≥n de creaci√≥n, m√©todos, mocks y errores).
          
          ‚ö†Ô∏è Importante:
          - Usa el nombre de archivo exactamente como est√° listado.
          - No omitas ninguna entrada.
          - No generes archivos adicionales que no est√©n definidos arriba.
          - Si necesitas importar una clase (como `Empleado`), y **no est√° expl√≠citamente listada**, debes crearla t√∫ mismo como parte de los archivos generados (`models/empleado.model.ts`).
          - No asumas la existencia de archivos externos.
          - Usa Angular standalone (sin m√≥dulos).
          - Usa Jasmine + Karma.
          - Devuelve solo bloques de c√≥digo con el siguiente formato:
          
          === archivo: [ruta/archivo.ts] ===
          [c√≥digo aqu√≠]
          === archivo: [ruta/archivo.spec.ts] ===
          [c√≥digo aqu√≠]
          
          Estructura esperada del proyecto:
          src/
          ‚îî‚îÄ‚îÄ app/
              ‚îî‚îÄ‚îÄ features/
                  ‚îî‚îÄ‚îÄ empleados/
                      ‚îú‚îÄ‚îÄ components/
                      ‚îÇ   ‚îî‚îÄ‚îÄ [nombre].component.ts
                      ‚îÇ   ‚îî‚îÄ‚îÄ [nombre].component.html
                      ‚îÇ   ‚îî‚îÄ‚îÄ [nombre].component.css
                      ‚îÇ   ‚îî‚îÄ‚îÄ [nombre].component.spec.ts
                      ‚îú‚îÄ‚îÄ services/
                      ‚îÇ   ‚îî‚îÄ‚îÄ [nombre].service.ts
                      ‚îÇ   ‚îî‚îÄ‚îÄ [nombre].service.spec.ts
                      ‚îú‚îÄ‚îÄ models/
                      ‚îÇ   ‚îî‚îÄ‚îÄ [modelo].model.ts (solo si se requiere)
          EOF
            
          
      - name: Llamar a OpenAI para generar c√≥digo TS
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          cd repositorio-base
      
          echo "üì® Enviando prompt a OpenAI para generaci√≥n de c√≥digo TypeScript..."
      
          echo "üìÑ Validando contenido de prompt_ts.txt (base del payload)..."
          wc -c prompt_ts.txt
          split -b 10000 prompt_ts.txt prompt_part_
      
          for f in prompt_part_*; do
            echo "üß© Contenido de $f"
            cat "$f"
            echo "---------------------------------------------"
          done
      
          echo "üìÑ Construyendo payload_ts.json con entrada completa (sin riesgo de truncamiento)..."
          jq -Rs --arg SYSTEM_MSG "Eres un generador experto de aplicaciones Angular. Devuelve √∫nicamente c√≥digo TypeScript v√°lido, sin explicaciones." '
          {
            model: "gpt-4",
            messages: [
              { "role": "system", "content": $SYSTEM_MSG },
              { "role": "user", "content": . }
            ],
            temperature: 0.2
          }
          ' < prompt_ts.txt > payload_ts.json
      
          echo "üî¢ Tama√±o de payload_ts.json:"
          wc -c payload_ts.json
      
          echo "üìÑ Validando contenido completo del payload (dividido por partes)..."
          split -b 10000 payload_ts.json payload_part_
      
          for f in payload_part_*; do
            echo "üß© Contenido de $f"
            cat "$f"
            echo "---------------------------------------------"
          done
      
          echo "üì§ Payload construido, enviando a OpenAI..."
      
          curl -s https://api.openai.com/v1/chat/completions \
            -H "Authorization: Bearer $OPENAI_API_KEY" \
            -H "Content-Type: application/json" \
            -d @payload_ts.json > respuesta_ts.json
      
          echo "üì• Respuesta recibida."
      
          RESULTADO=$(jq -r '.choices[0].message.content // empty' respuesta_ts.json)
      
          if [ -z "$RESULTADO" ]; then
            echo "‚ùå No se recibi√≥ c√≥digo v√°lido desde OpenAI."
            exit 1
          fi
      
          echo "$RESULTADO" > codigo_ts_generado.txt
      
          echo "‚úÖ C√≥digo TypeScript generado guardado en 'codigo_ts_generado.txt'"
      
      
      - name: Separar archivos TypeScript (.ts + .spec.ts) generados
        run: |
          cd repositorio-base
      
          echo "üßπ Limpiando residuos de formato GPT (TS)..."
          sed -i '/^---/d' codigo_ts_generado.txt
          sed -i '/^```.*$/d' codigo_ts_generado.txt
          sed -i '/^# .*$/d' codigo_ts_generado.txt
          sed -i '/^$/N;/^\n$/D' codigo_ts_generado.txt
      
          echo "üìÇ Separando archivos .ts individuales..."
          csplit --quiet --prefix=ts_tmp_ --suffix-format=%02d.txt codigo_ts_generado.txt "/^=== archivo: /" {*}
      
          for file in ts_tmp_*.txt; do
            ruta=$(grep '^=== archivo:' "$file" | sed -E 's/^=== archivo: //;s/ ===$//')
            if [ -z "$ruta" ]; then
              echo "‚ö†Ô∏è No se pudo determinar ruta para $file. Saltando."
              continue
            fi
      
            destino="${{ steps.detectar_app.outputs.appdir }}/$ruta"
            echo "üìÑ Escribiendo archivo: $destino"
            mkdir -p "$(dirname "$destino")"
            tail -n +2 "$file" > "$destino"
            rm "$file"
          done
      
          echo "‚úÖ Archivos TypeScript generados:"
          find "${{ steps.detectar_app.outputs.appdir }}/src/app" -type f \( -name "*.ts" -o -name "*.spec.ts" \)
      
      - name: Mostrar c√≥digo TypeScript generado
        run: |
          echo "C√≥digo Angular (TS) generado:"
          cat repositorio-base/codigo_ts_generado.txt
    
      - name: Generar prompt para HTML y CSS (seg√∫n dise√±o)
        run: |
          cd repositorio-base
      
          echo "Preparando prompt para generaci√≥n de HTML y CSS..."
      
          echo -e "\n\n--- HISTORIA DE USUARIO ---" > prompt_ui.txt
          cat entrada_gpt.txt >> prompt_ui.txt
      
          echo -e "\n\n--- DISE√ëO VISUAL / UI / ESTILOS ---" >> prompt_ui.txt
          cat entrada_diseno.json >> prompt_ui.txt
      
          echo -e "\n\n--- C√ìDIGO TYPESCRIPT GENERADO ---" >> prompt_ui.txt
          cat codigo_ts_generado.txt >> prompt_ui.txt
      
          echo -e "\n\n--- INSTRUCCIONES ---" >> prompt_ui.txt
          cat <<'EOF' >> prompt_ui.txt

          Eres un generador experto de interfaces Angular. Tu tarea es:

          1. Leer la historia de usuario, el dise√±o visual JSON y el archivo `.ts` generado previamente.
          2. Generar para cada componente Angular nuevo/modificado los archivos:
            - `.component.html`
            - `.component.css`

          üîß Requisitos visuales y estructurales:

          - Usa los **tokens visuales** provistos en el JSON:
            - Tipograf√≠a: `font.family.primary`, `font.size.body`, `font.size.title`
            - Colores: `color.primary`, `color.accent`, `color.text`, `color.neutral`, `color.header`
            - Bordes: `border.radius.button`
          - Aplica los colores correctos en botones (`color.primary`, `color.accent`) y textos (`color.text`).
          - Usa contenedores de tipo **tarjeta** (`card`) para el contenido, como se especifica en el dise√±o.
          - Si el layout contiene formularios o inputs (como "Buscar por nombre"), debes reflejarlos con campos `<input>`, `<form>`, `<label>` y botones con clases adecuadas.
          - Si el layout tiene un `header` con `logo` y navegaci√≥n, incl√∫yelo como `<header>` o `<nav>` en la estructura HTML.
          - Las clases CSS deben ser coherentes, reutilizables y limpias. Prefiere nombres gen√©ricos como `.form-field`, `.card`, `.title`, `.button-primary`.

          Estructura de salida:

          - Cada archivo generado debe ir envuelto entre delimitadores:
            === archivo: src/app/components/[nombre]/[nombre].component.html ===
            ...c√≥digo HTML...
            === archivo: src/app/components/[nombre]/[nombre].component.css ===
            ...c√≥digo CSS...

          No incluyas c√≥digo TypeScript.
          No incluyas explicaciones ni comentarios fuera del c√≥digo.

          EOF  
      
      - name: Llamar a OpenAI para generar HTML y CSS
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          cd repositorio-base
      
          echo "üì® Enviando prompt a OpenAI para generaci√≥n de HTML y CSS..."
      
          jq -Rs --arg SYSTEM_MSG "Eres un generador experto de interfaces Angular. Devuelve √∫nicamente c√≥digo HTML y CSS limpio." '{
            model: "gpt-4",
            messages: [
              { "role": "system", "content": $SYSTEM_MSG },
              { "role": "user", "content": . }
            ],
            temperature: 0.2
          }' prompt_ui.txt > payload_ui.json
      
          curl -s https://api.openai.com/v1/chat/completions \
            -H "Authorization: Bearer $OPENAI_API_KEY" \
            -H "Content-Type: application/json" \
            -d @payload_ui.json > respuesta_ui.json
      
          echo "üì• Respuesta recibida."
      
          UI_CODE=$(jq -r '.choices[0].message.content // empty' respuesta_ui.json)
      
          if [ -z "$UI_CODE" ]; then
            echo "‚ùå No se recibi√≥ c√≥digo HTML/CSS v√°lido desde OpenAI."
            exit 1
          fi
      
          echo "$UI_CODE" > codigo_ui_generado.txt
          echo "‚úÖ Archivos HTML y CSS generados correctamente."
      

      - name: Separar archivos HTML y CSS generados
        run: |
          cd repositorio-base
      
          echo "üßπ Limpiando residuos de formato GPT (UI)..."
          sed -i '/^---/d' codigo_ui_generado.txt
          sed -i '/^```.*$/d' codigo_ui_generado.txt
          sed -i '/^# .*$/d' codigo_ui_generado.txt
          sed -i '/^$/N;/^\n$/D' codigo_ui_generado.txt
      
          echo "üìÇ Separando archivos .html y .css individuales..."
          csplit --quiet --prefix=ui_tmp_ --suffix-format=%02d.txt codigo_ui_generado.txt "/^=== archivo: /" {*}
      
          for file in ui_tmp_*.txt; do
            ruta=$(grep '^=== archivo:' "$file" | sed -E 's/^=== archivo: //;s/ ===$//')
            if [ -z "$ruta" ]; then
              echo "‚ö†Ô∏è No se pudo determinar ruta para $file. Saltando."
              continue
            fi
      
            destino="${{ steps.detectar_app.outputs.appdir }}/$ruta"
            echo "üìÑ Escribiendo archivo: $destino"
            mkdir -p "$(dirname "$destino")"
            tail -n +2 "$file" > "$destino"
            rm "$file"
          done
      
          echo "‚úÖ Archivos HTML y CSS generados:"
          find "${{ steps.detectar_app.outputs.appdir }}/src/app/components" -type f \( -name "*.html" -o -name "*.css" \)
      
      - name: Generar resumen de archivos creados
        run: |
          cd repositorio-base

          echo "üìã Resumen de archivos generados:" > resumen_generacion.txt
          {
            echo ""
            echo "=== COMPONENTES GENERADOS ==="
            find "${{ steps.detectar_app.outputs.appdir }}/src/app/components" -type f \( -name "*.ts" -o -name "*.html" -o -name "*.css" \) | sort

            echo ""
            echo "=== SERVICIOS GENERADOS ==="
            find "${{ steps.detectar_app.outputs.appdir }}/src/app/services" -type f -name "*.ts" | sort

            echo ""
            echo "=== MODELOS GENERADOS ==="
            find "${{ steps.detectar_app.outputs.appdir }}/src/app/models" -type f -name "*.ts" | sort || true
          } >> resumen_generacion.txt

          echo "üìù Contenido del resumen:"
          cat resumen_generacion.txt

      - name: Ejecutar pruebas unitarias con correcci√≥n autom√°tica
        run: |
          echo "üìÅ Entrando al proyecto Angular"
          cd repositorio-base/${{ steps.detectar_app.outputs.appdir }}
      
          echo "üì¶ Instalando dependencias..."
          npm install
      
          max_attempts=3
          attempt=1
      
          while [ $attempt -le $max_attempts ]; do
            echo "üß™ Ejecutando pruebas unitarias - Intento $attempt..."
            if npx ng test --watch=false --browsers=ChromeHeadless | tee ../test-error.log; then
              echo "‚úÖ Tests pasaron en el intento $attempt"
              exit 0
            else
              echo "‚ùå Tests fallidos en intento $attempt"
      
              if [ $attempt -eq $max_attempts ]; then
                echo "‚ùå No fue posible corregir los tests en $max_attempts intentos"
                exit 1
              fi
      
              echo "üß† Preparando payload para correcci√≥n con OpenAI..."
      
              cd ..
              test_log_path="test-error.log"
              code_path="codigo_ts_generado.txt"
              payload_path="payload_ts.json"
      
              # Limitar logs a 20KB si son demasiado grandes
              LOG_LIMIT=20000
              if [ $(wc -c < "$test_log_path") -gt $LOG_LIMIT ]; then
                echo "‚úÇÔ∏è Log demasiado largo. Recortando a $LOG_LIMIT bytes..."
                head -c $LOG_LIMIT "$test_log_path" > tmp_test_error.log
                mv tmp_test_error.log "$test_log_path"
              fi
      
              # Construir payload
              jq -n \
                --arg system_msg "Corrige el c√≥digo TypeScript para que pasen los tests unitarios. Devuelve cada archivo como: === archivo: ruta/archivo.ts ===\n[c√≥digo]" \
                --rawfile errores "$test_log_path" \
                --rawfile codigo "$code_path" \
                '{
                  model: "gpt-4",
                  messages: [
                    { "role": "system", "content": $system_msg },
                    { "role": "user", "content": "Errores:\n\($errores)\n\nC√≥digo:\n\($codigo)" }
                  ],
                  temperature: 0
                }' > "$payload_path"
      
              echo "üìè Tama√±o y tokens estimados:"
              bytes=$(wc -c < "$payload_path")
              tokens=$((bytes / 4))
              echo "üì¶ Tama√±o: $bytes bytes (~$tokens tokens)"
      
              if [ $tokens -gt 39000 ]; then
                echo "‚ö†Ô∏è Payload supera el l√≠mite. Abortando para evitar error 400."
                exit 1
              fi
      
              echo "üì® Enviando solicitud a OpenAI..."
              curl -s https://api.openai.com/v1/chat/completions \
                -H "Authorization: Bearer ${{ secrets.OPENAI_API_KEY }}" \
                -H "Content-Type: application/json" \
                -d @"$payload_path" > respuesta_ts.json
      
              echo "üì• Respuesta recibida. Aplicando correcciones..."
              jq -r '.choices[0].message.content // empty' respuesta_ts.json > codigo_ts_corregido.txt
      
              if [ ! -s codigo_ts_corregido.txt ]; then
                echo "‚ö†Ô∏è La respuesta de OpenAI est√° vac√≠a o malformada"
                exit 1
              fi
      
              echo "üìÑ Separando archivos generados..."
              csplit --quiet --prefix=ts_tmp_ --suffix-format=%02d.txt codigo_ts_corregido.txt "/^=== archivo: /" {*}
      
              for file in ts_tmp_*.txt; do
                ruta=$(grep '^=== archivo:' "$file" | sed -E 's/^=== archivo: //;s/ ===$//')
                if [ -z "$ruta" ]; then
                  echo "‚ö†Ô∏è No se pudo determinar ruta para $file. Saltando."
                  continue
                fi
      
                destino="repositorio-base/${{ steps.detectar_app.outputs.appdir }}/$ruta"
                mkdir -p "$(dirname "$destino")"
                tail -n +2 "$file" > "$destino"
                rm "$file"
              done
      
              cd "repositorio-base/${{ steps.detectar_app.outputs.appdir }}"
              echo "üîÅ Reintentando despu√©s de correcci√≥n..."
              ((attempt++))
            fi
          done
              
      - name: Commit y push de los cambios generados
        env:
          GH_PAT: ${{ secrets.GH_PAT }}
        run: |
          cd repositorio-base

          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git checkout main

          git add .

          if git diff --cached --quiet; then
            echo "‚ö†Ô∏è No hay cambios para commitear. Finalizando sin push."
            exit 0
          fi

          mensaje="ü§ñ C√≥digo Angular generado autom√°ticamente desde historia de usuario + resumen"
          git commit -m "$mensaje"

          echo "üì§ Haciendo push a main..."
          git push origin main

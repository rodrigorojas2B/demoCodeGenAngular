{
  "model": "gpt-4",
  "messages": [
    {
      "role": "system",
      "content": "Eres un generador experto de aplicaciones Angular. Devuelve únicamente código TypeScript válido, sin explicaciones."
    },
    {
      "role": "user",
      "content": "\n--- HISTORIA DE USUARIO ---\nid: HDU-EMP-001\ntitulo: Prevenir eliminación de empleadas\nactor: Administrador del sistema\ndescripcion: \n  Como administrador del sistema,\n  quiero que no se permita eliminar empleados de género femenino,\n  para cumplir con la normativa interna de no eliminar registros históricos sensibles.\ncriterios_aceptacion:\n  - Si se intenta eliminar un empleado con género \"Femenino\", se debe lanzar una excepción o retornar un error controlado.\n  - Si el empleado es de género \"Masculino\" u otro valor, se permite la eliminación normal.\n  - El método de eliminación actual debe ser modificado para incluir esta validación.\n  - No debe eliminarse ninguna lógica existente que ya esté implementada en ese método.\n  - Se deben mantener todos los métodos actuales sin eliminación ni reemplazo.\n  - La modificación debe estar delimitada por comentarios que indiquen claramente el inicio y fin del cambio realizado por la IA.\n\nid: HDU-EMP-002\ntitulo: Empleados nacidos antes del 2000\nactor: Administrador del sistema\ndescripcion: \n  Como administrador del  sistema\n  quiero obtener una lista de empleados que hayan nacido antes del año 2000\n  para poder segmentar a los empleados  por generaciones y aplicar políticas diferenciadas\ncriterios_aceptacion:\n  - Se debe crear un nuevo end-point para esta consulta\n  - Se deben mantener todos los métodos actuales sin eliminación ni reemplazo.\n  - La modificación debe estar delimitada por comentarios que indiquen claramente el inicio y fin del cambio realizado por la IA.\n\nid: HDU-EMP-003\ntitulo: Empleados ordenados  por posición\nactor: Administrador del sistema\ndescripcion: \n  Como administrador del sistema\n  quiero obtener una lista de empleados agrupados por posición\n  para poder segmentar a contar cuantos empledos hay en cada posición\ncriterios_aceptacion:\n  - Se debe crear un nuevo end-point  para esta consulta\n  - Se deben mantener todos los métodos actuales sin eliminación ni reemplazo.\n  - La modificación debe estar delimitada por comentarios que indiquen claramente el inicio y fin del cambio realizado por la IA.\n--- ANÁLISIS DE APIs DISPONIBLES ---\n| Historia | Método | Endpoint | Parámetros | Cobertura | Observación |\n|----------|--------|----------|------------|-----------|-------------|\n| HDU-EMP-001 | DELETE | /api/employees/{id} | id | Parcial | El endpoint permite eliminar un empleado, pero no hay una validación específica para prevenir la eliminación de empleados femeninos. |\n| HDU-EMP-002 | GET | /api/employees/born-before-2000 | Ninguno | Sí | El endpoint parece diseñado para cumplir con esta historia de usuario. Sin embargo, la implementación real debe asegurarse de que los datos de nacimiento se manejan correctamente. |\n| HDU-EMP-003 | GET | /api/employees/order-by-position | Ninguno | Sí | El endpoint parece diseñado para cumplir con esta historia de usuario. Sin embargo, la implementación real debe asegurarse de que los datos de posición se manejan correctamente. |\n\n--- COMPONENTES Y SERVICIOS A GENERAR (extraídos del diagnóstico) ---\n\nComponente:\n- Archivo: \n- Tipo: ------------------\n- Clasificación: ------\n- Método: ------------\n- Endpoint: --------\n- Motivo: ----------\n\nComponente:\n- Archivo: \n- Tipo:  employee.service.ts \n- Clasificación:  Servicio \n- Método:  HDU-EMP-001 \n- Endpoint:  DELETE \n- Motivo:  /api/employees/{id} \n\nComponente:\n- Archivo: \n- Tipo:  employee.component.ts \n- Clasificación:  Componente \n- Método:  HDU-EMP-001 \n- Endpoint:  DELETE \n- Motivo:  /api/employees/{id} \n\nComponente:\n- Archivo: \n- Tipo:  bornbefore2000.service.ts \n- Clasificación:  Servicio \n- Método:  HDU-EMP-002 \n- Endpoint:  GET \n- Motivo:  /api/employees/born-before-2000 \n\nComponente:\n- Archivo: \n- Tipo:  bornbefore2000.component.ts \n- Clasificación:  Componente \n- Método:  HDU-EMP-002 \n- Endpoint:  GET \n- Motivo:  /api/employees/born-before-2000 \n\nComponente:\n- Archivo: \n- Tipo:  orderbyposition.service.ts \n- Clasificación:  Servicio \n- Método:  HDU-EMP-003 \n- Endpoint:  GET \n- Motivo:  /api/employees/order-by-position \n\nComponente:\n- Archivo: \n- Tipo:  orderbyposition.component.ts \n- Clasificación:  Componente \n- Método:  HDU-EMP-003 \n- Endpoint:  GET \n- Motivo:  /api/employees/order-by-position \n\n--- INSTRUCCIONES ---\n\nEres un generador de código Angular experto.\n\nPara **cada entrada listada en la sección anterior**, debes generar exactamente los siguientes archivos, incluso si el nombre del archivo se repite (por ejemplo, si hay múltiples métodos asociados al mismo `employee.service.ts`, cada uno debe aparecer de forma independiente en el resultado).\n\nGenera exactamente:\n\n- El archivo `.ts` con la lógica del componente o servicio.\n- El archivo `.spec.ts` con pruebas unitarias completas (verificación de creación, métodos, mocks y errores).\n- Para componentes: también genera su `.html` y `.css` respectivos.\n\n⚠️ Importante:\n- Usa el nombre de archivo exactamente como está listado.\n- Cada entrada representa un archivo separado, incluso si el nombre del archivo coincide con otro.\n- No agrupes funcionalidades múltiples en un solo archivo.\n- No omitas ninguna entrada.\n- No generes archivos adicionales que no estén definidos arriba.\n- Si necesitas importar una clase (como `Empleado`), y **no está explícitamente listada**, debes crearla tú mismo como parte de los archivos generados (`models/empleado.model.ts`).\n- No asumas la existencia de archivos externos.\n- Usa Angular standalone (sin NgModules).\n- Usa Jasmine + Karma para las pruebas.\n- Devuelve solo bloques de código con el siguiente formato, sin explicaciones ni texto adicional:\n\n=== archivo: [ruta/archivo.ts] ===\n[código aquí]\n=== archivo: [ruta/archivo.spec.ts] ===\n[código aquí]\n\nEstructura esperada del proyecto:\nsrc/\n└── app/\n    └── features/\n        └── empleados/\n            ├── components/\n            │   └── [nombre].component.ts\n            │   └── [nombre].component.html\n            │   └── [nombre].component.css\n            │   └── [nombre].component.spec.ts\n            ├── services/\n            │   └── [nombre].service.ts\n            │   └── [nombre].service.spec.ts\n            ├── models/\n            │   └── [modelo].model.ts (solo si se requiere)"
    }
  ],
  "temperature": 0.2
}

=== archivo: src/app/features/empleados/services/employee.service.ts ===
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable, throwError } from 'rxjs';
import { catchError } from 'rxjs/operators';
import { Employee } from '../models/employee.model';

@Injectable({
  providedIn: 'root'
})
export class EmployeeService {
  private apiUrl = '/api/employees';

  constructor(private http: HttpClient) { }

  deleteEmployee(id: string): Observable<{}> {
    return this.http.get<Employee>(`${this.apiUrl}/${id}`).pipe(
      catchError(err => {
        if (err.status === 404) {
          return throwError('Employee not found');
        }
        return throwError(err);
      }),
      switchMap(employee => {
        if (employee.gender === 'Femenino') {
          return throwError('Cannot delete female employees');
        }
        return this.http.delete(`${this.apiUrl}/${id}`);
      })
    );
  }
}
=== archivo: src/app/features/empleados/services/employee.service.spec.ts ===
import { TestBed } from '@angular/core/testing';
import { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';
import { EmployeeService } from './employee.service';

describe('EmployeeService', () => {
  let service: EmployeeService;
  let httpMock: HttpTestingController;

  beforeEach(() => {
    TestBed.configureTestingModule({
      imports: [HttpClientTestingModule],
      providers: [EmployeeService]
    });

    service = TestBed.inject(EmployeeService);
    httpMock = TestBed.inject(HttpTestingController);
  });

  afterEach(() => {
    httpMock.verify();
  });

  it('should be created', () => {
    expect(service).toBeTruthy();
  });

  it('should throw an error if trying to delete a female employee', () => {
    const mockEmployee = { id: '1', gender: 'Femenino' };

    service.deleteEmployee('1').subscribe(() => {}, err => {
      expect(err).toEqual('Cannot delete female employees');
    });

    const req = httpMock.expectOne('/api/employees/1');
    expect(req.request.method).toBe('GET');
    req.flush(mockEmployee);
  });

  it('should delete a male employee', () => {
    const mockEmployee = { id: '2', gender: 'Masculino' };

    service.deleteEmployee('2').subscribe(response => {
      expect(response).toBeNull();
    });

    const req = httpMock.expectOne('/api/employees/2');
    expect(req.request.method).toBe('GET');
    req.flush(mockEmployee);

    const deleteReq = httpMock.expectOne('/api/employees/2');
    expect(deleteReq.request.method).toBe('DELETE');
    deleteReq.flush(null);
  });
});
=== archivo: src/app/features/empleados/models/employee.model.ts ===
export interface Employee {
  id: string;
  gender: string;
}
=== archivo: src/app/features/empleados/services/bornbefore2000.service.ts ===
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';
import { Employee } from '../models/employee.model';

@Injectable({
  providedIn: 'root'
})
export class BornBefore2000Service {
  private apiUrl = '/api/employees/born-before-2000';

  constructor(private http: HttpClient) { }

  getEmployeesBornBefore2000(): Observable<Employee[]> {
    return this.http.get<Employee[]>(this.apiUrl);
  }
}
=== archivo: src/app/features/empleados/services/bornbefore2000.service.spec.ts ===
import { TestBed } from '@angular/core/testing';
import { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';
import { BornBefore2000Service } from './bornbefore2000.service';

describe('BornBefore2000Service', () => {
  let service: BornBefore2000Service;
  let httpMock: HttpTestingController;

  beforeEach(() => {
    TestBed.configureTestingModule({
      imports: [HttpClientTestingModule],
      providers: [BornBefore2000Service]
    });

    service = TestBed.inject(BornBefore2000Service);
    httpMock = TestBed.inject(HttpTestingController);
  });

  afterEach(() => {
    httpMock.verify();
  });

  it('should be created', () => {
    expect(service).toBeTruthy();
  });

  it('should fetch employees born before 2000', () => {
    const mockEmployees = [
      { id: '1', birthDate: '1999-01-01' },
      { id: '2', birthDate: '1989-01-01' }
    ];

    service.getEmployeesBornBefore2000().subscribe(employees => {
      expect(employees.length).toBe(2);
      expect(employees).toEqual(mockEmployees);
    });

    const req = httpMock.expectOne('/api/employees/born-before-2000');
    expect(req.request.method).toBe('GET');
    req.flush(mockEmployees);
  });
});
=== archivo: src/app/features/empleados/services/orderbyposition.service.ts ===
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';
import { Employee } from '../models/employee.model';

@Injectable({
  providedIn: 'root'
})
export class OrderByPositionService {
  private apiUrl = '/api/employees/order-by-position';

  constructor(private http: HttpClient) { }

  getEmployeesOrderByPosition(): Observable<Employee[]> {
    return this.http.get<Employee[]>(this.apiUrl);
  }
}
=== archivo: src/app/features/empleados/services/orderbyposition.service.spec.ts ===
import { TestBed } from '@angular/core/testing';
import { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';
import { OrderByPositionService } from './orderbyposition.service';

describe('OrderByPositionService', () => {
  let service: OrderByPositionService;
  let httpMock: HttpTestingController;

  beforeEach(() => {
    TestBed.configureTestingModule({
      imports: [HttpClientTestingModule],
      providers: [OrderByPositionService]
    });

    service = TestBed.inject(OrderByPositionService);
    httpMock = TestBed.inject(HttpTestingController);
  });

  afterEach(() => {
    httpMock.verify();
  });

  it('should be created', () => {
    expect(service).toBeTruthy();
  });

  it('should fetch employees ordered by position', () => {
    const mockEmployees = [
      { id: '1', position: 'Manager' },
      { id: '2', position: 'Developer' }
    ];

    service.getEmployeesOrderByPosition().subscribe(employees => {
      expect(employees.length).toBe(2);
      expect(employees).toEqual(mockEmployees);
    });

    const req = httpMock.expectOne('/api/employees/order-by-position');
    expect(req.request.method).toBe('GET');
    req.flush(mockEmployees);
  });
});



--- HISTORIA DE USUARIO ---
id: HDU-EMP-001
titulo: Prevenir eliminación de empleadas
actor: Administrador del sistema
descripcion: 
  Como administrador del sistema,
  quiero que no se permita eliminar empleados de género femenino,
  para cumplir con la normativa interna de no eliminar registros históricos sensibles.
criterios_aceptacion:
  - Si se intenta eliminar un empleado con género "Femenino", se debe lanzar una excepción o retornar un error controlado.
  - Si el empleado es de género "Masculino" u otro valor, se permite la eliminación normal.
  - El método de eliminación actual debe ser modificado para incluir esta validación.
  - No debe eliminarse ninguna lógica existente que ya esté implementada en ese método.
  - Se deben mantener todos los métodos actuales sin eliminación ni reemplazo.
  - La modificación debe estar delimitada por comentarios que indiquen claramente el inicio y fin del cambio realizado por la IA.

id: HDU-EMP-002
titulo: Empleados nacidos antes del 2000
actor: Administrador del sistema
descripcion: 
  Como administrador del  sistema
  quiero obtener una lista de empleados que hayan nacido antes del año 2000
  para poder segmentar a los empleados  por generaciones y aplicar políticas diferenciadas
criterios_aceptacion:
  - Se debe crear un nuevo end-point para esta consulta
  - Se deben mantener todos los métodos actuales sin eliminación ni reemplazo.
  - La modificación debe estar delimitada por comentarios que indiquen claramente el inicio y fin del cambio realizado por la IA.

id: HDU-EMP-003
titulo: Empleados ordenados  por posición
actor: Administrador del sistema
descripcion: 
  Como administrador del sistema
  quiero obtener una lista de empleados agrupados por posición
  para poder segmentar a contar cuantos empledos hay en cada posición
criterios_aceptacion:
  - Se debe crear un nuevo end-point  para esta consulta
  - Se deben mantener todos los métodos actuales sin eliminación ni reemplazo.
  - La modificación debe estar delimitada por comentarios que indiquen claramente el inicio y fin del cambio realizado por la IA.

--- DISEÑO VISUAL / UI / ESTILOS ---
{
    "pantalla": "Consulta de Empleados",
    "tokens": {
      "color": {
        "primary": { "value": "#009688", "type": "color" },          // Verde 2Brains
        "accent": { "value": "#4CAF50", "type": "color" },           // Verde claro
        "neutral": { "value": "#F5F5F5", "type": "color" },          // Gris fondo
        "text": { "value": "#212121", "type": "color" },             // Texto principal
        "buttonText": { "value": "#FFFFFF", "type": "color" },
        "header": { "value": "#0277BD", "type": "color" }            // Azul oscuro
      },
      "font": {
        "family": { "primary": { "value": "Roboto, sans-serif", "type": "fontFamily" } },
        "size": { "body": { "value": "16px", "type": "dimension" }, "title": { "value": "24px", "type": "dimension" } }
      },
      "border": {
        "radius": { "button": { "value": "8px", "type": "dimension" } }
      },
      "logo": {
        "url": "https://2brains.cl/wp-content/uploads/2022/01/logo-2brains.svg",
        "width": "120px",
        "height": "auto"
      }
    },
    "layout": {
      "header": {
        "type": "menu-bar",
        "background": "color.header",
        "elements": [
          { "type": "logo", "source": "tokens.logo.url" },
          { "type": "nav-item", "label": "Inicio", "route": "/" },
          { "type": "nav-item", "label": "Empleados", "route": "/empleados" },
          { "type": "nav-item", "label": "Cerrar sesión", "action": "logout()" }
        ]
      },
      "content": [
        {
          "type": "card",
          "title": "Listado de Empleados",
          "body": [
            {
              "type": "form",
              "fields": [
                {
                  "label": "Buscar por nombre",
                  "control": "nombre",
                  "inputType": "text",
                  "placeholder": "Ej: Juan Pérez"
                }
              ],
              "actions": [
                {
                  "type": "button",
                  "label": "Buscar",
                  "style": "primary",
                  "action": "buscarEmpleados()"
                }
              ]
            },
            {
              "type": "table",
              "dataSource": "empleados",
              "columns": ["Nombre", "Cargo", "Email"]
            }
          ]
        }
      ]
    }
  }
  

--- CÓDIGO TYPESCRIPT GENERADO ---
=== archivo: src/app/features/empleados/services/employee.service.ts ===
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable, throwError } from 'rxjs';
import { catchError } from 'rxjs/operators';
import { Employee } from '../models/employee.model';

@Injectable({
  providedIn: 'root'
})
export class EmployeeService {
  private apiUrl = '/api/employees';

  constructor(private http: HttpClient) { }

  deleteEmployee(id: string): Observable<{}> {
    return this.http.get<Employee>(`${this.apiUrl}/${id}`).pipe(
      catchError(err => {
        if (err.status === 404) {
          return throwError('Employee not found');
        }
        return throwError(err);
      }),
      switchMap(employee => {
        if (employee.gender === 'Femenino') {
          return throwError('Cannot delete female employees');
        }
        return this.http.delete(`${this.apiUrl}/${id}`);
      })
    );
  }
}
=== archivo: src/app/features/empleados/services/employee.service.spec.ts ===
import { TestBed } from '@angular/core/testing';
import { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';
import { EmployeeService } from './employee.service';

describe('EmployeeService', () => {
  let service: EmployeeService;
  let httpMock: HttpTestingController;

  beforeEach(() => {
    TestBed.configureTestingModule({
      imports: [HttpClientTestingModule],
      providers: [EmployeeService]
    });

    service = TestBed.inject(EmployeeService);
    httpMock = TestBed.inject(HttpTestingController);
  });

  afterEach(() => {
    httpMock.verify();
  });

  it('should be created', () => {
    expect(service).toBeTruthy();
  });

  it('should throw an error if trying to delete a female employee', () => {
    const mockEmployee = { id: '1', gender: 'Femenino' };

    service.deleteEmployee('1').subscribe(() => {}, err => {
      expect(err).toEqual('Cannot delete female employees');
    });

    const req = httpMock.expectOne('/api/employees/1');
    expect(req.request.method).toBe('GET');
    req.flush(mockEmployee);
  });

  it('should delete a male employee', () => {
    const mockEmployee = { id: '2', gender: 'Masculino' };

    service.deleteEmployee('2').subscribe(response => {
      expect(response).toBeNull();
    });

    const req = httpMock.expectOne('/api/employees/2');
    expect(req.request.method).toBe('GET');
    req.flush(mockEmployee);

    const deleteReq = httpMock.expectOne('/api/employees/2');
    expect(deleteReq.request.method).toBe('DELETE');
    deleteReq.flush(null);
  });
});
=== archivo: src/app/features/empleados/models/employee.model.ts ===
export interface Employee {
  id: string;
  gender: string;
}
=== archivo: src/app/features/empleados/services/bornbefore2000.service.ts ===
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';
import { Employee } from '../models/employee.model';

@Injectable({
  providedIn: 'root'
})
export class BornBefore2000Service {
  private apiUrl = '/api/employees/born-before-2000';

  constructor(private http: HttpClient) { }

  getEmployeesBornBefore2000(): Observable<Employee[]> {
    return this.http.get<Employee[]>(this.apiUrl);
  }
}
=== archivo: src/app/features/empleados/services/bornbefore2000.service.spec.ts ===
import { TestBed } from '@angular/core/testing';
import { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';
import { BornBefore2000Service } from './bornbefore2000.service';

describe('BornBefore2000Service', () => {
  let service: BornBefore2000Service;
  let httpMock: HttpTestingController;

  beforeEach(() => {
    TestBed.configureTestingModule({
      imports: [HttpClientTestingModule],
      providers: [BornBefore2000Service]
    });

    service = TestBed.inject(BornBefore2000Service);
    httpMock = TestBed.inject(HttpTestingController);
  });

  afterEach(() => {
    httpMock.verify();
  });

  it('should be created', () => {
    expect(service).toBeTruthy();
  });

  it('should fetch employees born before 2000', () => {
    const mockEmployees = [
      { id: '1', birthDate: '1999-01-01' },
      { id: '2', birthDate: '1989-01-01' }
    ];

    service.getEmployeesBornBefore2000().subscribe(employees => {
      expect(employees.length).toBe(2);
      expect(employees).toEqual(mockEmployees);
    });

    const req = httpMock.expectOne('/api/employees/born-before-2000');
    expect(req.request.method).toBe('GET');
    req.flush(mockEmployees);
  });
});
=== archivo: src/app/features/empleados/services/orderbyposition.service.ts ===
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';
import { Employee } from '../models/employee.model';

@Injectable({
  providedIn: 'root'
})
export class OrderByPositionService {
  private apiUrl = '/api/employees/order-by-position';

  constructor(private http: HttpClient) { }

  getEmployeesOrderByPosition(): Observable<Employee[]> {
    return this.http.get<Employee[]>(this.apiUrl);
  }
}
=== archivo: src/app/features/empleados/services/orderbyposition.service.spec.ts ===
import { TestBed } from '@angular/core/testing';
import { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';
import { OrderByPositionService } from './orderbyposition.service';

describe('OrderByPositionService', () => {
  let service: OrderByPositionService;
  let httpMock: HttpTestingController;

  beforeEach(() => {
    TestBed.configureTestingModule({
      imports: [HttpClientTestingModule],
      providers: [OrderByPositionService]
    });

    service = TestBed.inject(OrderByPositionService);
    httpMock = TestBed.inject(HttpTestingController);
  });

  afterEach(() => {
    httpMock.verify();
  });

  it('should be created', () => {
    expect(service).toBeTruthy();
  });

  it('should fetch employees ordered by position', () => {
    const mockEmployees = [
      { id: '1', position: 'Manager' },
      { id: '2', position: 'Developer' }
    ];

    service.getEmployeesOrderByPosition().subscribe(employees => {
      expect(employees.length).toBe(2);
      expect(employees).toEqual(mockEmployees);
    });

    const req = httpMock.expectOne('/api/employees/order-by-position');
    expect(req.request.method).toBe('GET');
    req.flush(mockEmployees);
  });
});


--- INSTRUCCIONES ---

Eres un generador experto de interfaces Angular. Tu tarea es:

1. Leer la historia de usuario, el diseño visual JSON y el archivo `.ts` generado previamente.
2. Generar para cada componente Angular nuevo/modificado los archivos:
  - `.component.html`
  - `.component.css`

🔧 Requisitos visuales y estructurales:

- Usa los **tokens visuales** provistos en el JSON:
  - Tipografía: `font.family.primary`, `font.size.body`, `font.size.title`
  - Colores: `color.primary`, `color.accent`, `color.text`, `color.neutral`, `color.header`
  - Bordes: `border.radius.button`
- Aplica los colores correctos en botones (`color.primary`, `color.accent`) y textos (`color.text`).
- Usa contenedores de tipo **tarjeta** (`card`) para el contenido, como se especifica en el diseño.
- Si el layout contiene formularios o inputs (como "Buscar por nombre"), debes reflejarlos con campos `<input>`, `<form>`, `<label>` y botones con clases adecuadas.
- Si el layout tiene un `header` con `logo` y navegación, inclúyelo como `<header>` o `<nav>` en la estructura HTML.
- Las clases CSS deben ser coherentes, reutilizables y limpias. Prefiere nombres genéricos como `.form-field`, `.card`, `.title`, `.button-primary`.

Estructura de salida:

- Cada archivo generado debe ir envuelto entre delimitadores:
  === archivo: src/app/components/[nombre]/[nombre].component.html ===
  ...código HTML...
  === archivo: src/app/components/[nombre]/[nombre].component.css ===
  ...código CSS...

No incluyas código TypeScript.
No incluyas explicaciones ni comentarios fuera del código.

EOF  

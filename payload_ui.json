{
  "model": "gpt-4",
  "messages": [
    {
      "role": "system",
      "content": "Eres un generador experto de interfaces Angular. Devuelve únicamente código HTML y CSS limpio."
    },
    {
      "role": "user",
      "content": "\n\n--- HISTORIA DE USUARIO ---\nid: HDU-EMP-001\ntitulo: Prevenir eliminación de empleadas\nactor: Administrador del sistema\ndescripcion: \n  Como administrador del sistema,\n  quiero que no se permita eliminar empleados de género femenino,\n  para cumplir con la normativa interna de no eliminar registros históricos sensibles.\ncriterios_aceptacion:\n  - Si se intenta eliminar un empleado con género \"Femenino\", se debe lanzar una excepción o retornar un error controlado.\n  - Si el empleado es de género \"Masculino\" u otro valor, se permite la eliminación normal.\n  - El método de eliminación actual debe ser modificado para incluir esta validación.\n  - No debe eliminarse ninguna lógica existente que ya esté implementada en ese método.\n  - Se deben mantener todos los métodos actuales sin eliminación ni reemplazo.\n  - La modificación debe estar delimitada por comentarios que indiquen claramente el inicio y fin del cambio realizado por la IA.\n\nid: HDU-EMP-002\ntitulo: Empleados nacidos antes del 2000\nactor: Administrador del sistema\ndescripcion: \n  Como administrador del  sistema\n  quiero obtener una lista de empleados que hayan nacido antes del año 2000\n  para poder segmentar a los empleados  por generaciones y aplicar políticas diferenciadas\ncriterios_aceptacion:\n  - Se debe crear un nuevo end-point para esta consulta\n  - Se deben mantener todos los métodos actuales sin eliminación ni reemplazo.\n  - La modificación debe estar delimitada por comentarios que indiquen claramente el inicio y fin del cambio realizado por la IA.\n\nid: HDU-EMP-003\ntitulo: Empleados ordenados  por posición\nactor: Administrador del sistema\ndescripcion: \n  Como administrador del sistema\n  quiero obtener una lista de empleados agrupados por posición\n  para poder segmentar a contar cuantos empledos hay en cada posición\ncriterios_aceptacion:\n  - Se debe crear un nuevo end-point  para esta consulta\n  - Se deben mantener todos los métodos actuales sin eliminación ni reemplazo.\n  - La modificación debe estar delimitada por comentarios que indiquen claramente el inicio y fin del cambio realizado por la IA.\n\n--- DISEÑO VISUAL / UI / ESTILOS ---\n{\n    \"pantalla\": \"Consulta de Empleados\",\n    \"tokens\": {\n      \"color\": {\n        \"primary\": { \"value\": \"#009688\", \"type\": \"color\" },          // Verde 2Brains\n        \"accent\": { \"value\": \"#4CAF50\", \"type\": \"color\" },           // Verde claro\n        \"neutral\": { \"value\": \"#F5F5F5\", \"type\": \"color\" },          // Gris fondo\n        \"text\": { \"value\": \"#212121\", \"type\": \"color\" },             // Texto principal\n        \"buttonText\": { \"value\": \"#FFFFFF\", \"type\": \"color\" },\n        \"header\": { \"value\": \"#0277BD\", \"type\": \"color\" }            // Azul oscuro\n      },\n      \"font\": {\n        \"family\": { \"primary\": { \"value\": \"Roboto, sans-serif\", \"type\": \"fontFamily\" } },\n        \"size\": { \"body\": { \"value\": \"16px\", \"type\": \"dimension\" }, \"title\": { \"value\": \"24px\", \"type\": \"dimension\" } }\n      },\n      \"border\": {\n        \"radius\": { \"button\": { \"value\": \"8px\", \"type\": \"dimension\" } }\n      },\n      \"logo\": {\n        \"url\": \"https://2brains.cl/wp-content/uploads/2022/01/logo-2brains.svg\",\n        \"width\": \"120px\",\n        \"height\": \"auto\"\n      }\n    },\n    \"layout\": {\n      \"header\": {\n        \"type\": \"menu-bar\",\n        \"background\": \"color.header\",\n        \"elements\": [\n          { \"type\": \"logo\", \"source\": \"tokens.logo.url\" },\n          { \"type\": \"nav-item\", \"label\": \"Inicio\", \"route\": \"/\" },\n          { \"type\": \"nav-item\", \"label\": \"Empleados\", \"route\": \"/empleados\" },\n          { \"type\": \"nav-item\", \"label\": \"Cerrar sesión\", \"action\": \"logout()\" }\n        ]\n      },\n      \"content\": [\n        {\n          \"type\": \"card\",\n          \"title\": \"Listado de Empleados\",\n          \"body\": [\n            {\n              \"type\": \"form\",\n              \"fields\": [\n                {\n                  \"label\": \"Buscar por nombre\",\n                  \"control\": \"nombre\",\n                  \"inputType\": \"text\",\n                  \"placeholder\": \"Ej: Juan Pérez\"\n                }\n              ],\n              \"actions\": [\n                {\n                  \"type\": \"button\",\n                  \"label\": \"Buscar\",\n                  \"style\": \"primary\",\n                  \"action\": \"buscarEmpleados()\"\n                }\n              ]\n            },\n            {\n              \"type\": \"table\",\n              \"dataSource\": \"empleados\",\n              \"columns\": [\"Nombre\", \"Cargo\", \"Email\"]\n            }\n          ]\n        }\n      ]\n    }\n  }\n  \n\n--- CÓDIGO TYPESCRIPT GENERADO ---\n=== archivo: src/app/features/empleados/services/employee.service.ts ===\nimport { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { Employee } from '../models/employee.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class EmployeeService {\n  private apiUrl = '/api/employees';\n\n  constructor(private http: HttpClient) { }\n\n  deleteEmployee(id: string): Observable<{}> {\n    return this.http.get<Employee>(`${this.apiUrl}/${id}`).pipe(\n      catchError(err => {\n        if (err.status === 404) {\n          return throwError('Employee not found');\n        }\n        return throwError(err);\n      }),\n      switchMap(employee => {\n        if (employee.gender === 'Femenino') {\n          return throwError('Cannot delete female employees');\n        }\n        return this.http.delete(`${this.apiUrl}/${id}`);\n      })\n    );\n  }\n}\n=== archivo: src/app/features/empleados/services/employee.service.spec.ts ===\nimport { TestBed } from '@angular/core/testing';\nimport { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';\nimport { EmployeeService } from './employee.service';\n\ndescribe('EmployeeService', () => {\n  let service: EmployeeService;\n  let httpMock: HttpTestingController;\n\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      imports: [HttpClientTestingModule],\n      providers: [EmployeeService]\n    });\n\n    service = TestBed.inject(EmployeeService);\n    httpMock = TestBed.inject(HttpTestingController);\n  });\n\n  afterEach(() => {\n    httpMock.verify();\n  });\n\n  it('should be created', () => {\n    expect(service).toBeTruthy();\n  });\n\n  it('should throw an error if trying to delete a female employee', () => {\n    const mockEmployee = { id: '1', gender: 'Femenino' };\n\n    service.deleteEmployee('1').subscribe(() => {}, err => {\n      expect(err).toEqual('Cannot delete female employees');\n    });\n\n    const req = httpMock.expectOne('/api/employees/1');\n    expect(req.request.method).toBe('GET');\n    req.flush(mockEmployee);\n  });\n\n  it('should delete a male employee', () => {\n    const mockEmployee = { id: '2', gender: 'Masculino' };\n\n    service.deleteEmployee('2').subscribe(response => {\n      expect(response).toBeNull();\n    });\n\n    const req = httpMock.expectOne('/api/employees/2');\n    expect(req.request.method).toBe('GET');\n    req.flush(mockEmployee);\n\n    const deleteReq = httpMock.expectOne('/api/employees/2');\n    expect(deleteReq.request.method).toBe('DELETE');\n    deleteReq.flush(null);\n  });\n});\n=== archivo: src/app/features/empleados/models/employee.model.ts ===\nexport interface Employee {\n  id: string;\n  gender: string;\n}\n=== archivo: src/app/features/empleados/services/bornbefore2000.service.ts ===\nimport { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { Employee } from '../models/employee.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class BornBefore2000Service {\n  private apiUrl = '/api/employees/born-before-2000';\n\n  constructor(private http: HttpClient) { }\n\n  getEmployeesBornBefore2000(): Observable<Employee[]> {\n    return this.http.get<Employee[]>(this.apiUrl);\n  }\n}\n=== archivo: src/app/features/empleados/services/bornbefore2000.service.spec.ts ===\nimport { TestBed } from '@angular/core/testing';\nimport { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';\nimport { BornBefore2000Service } from './bornbefore2000.service';\n\ndescribe('BornBefore2000Service', () => {\n  let service: BornBefore2000Service;\n  let httpMock: HttpTestingController;\n\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      imports: [HttpClientTestingModule],\n      providers: [BornBefore2000Service]\n    });\n\n    service = TestBed.inject(BornBefore2000Service);\n    httpMock = TestBed.inject(HttpTestingController);\n  });\n\n  afterEach(() => {\n    httpMock.verify();\n  });\n\n  it('should be created', () => {\n    expect(service).toBeTruthy();\n  });\n\n  it('should fetch employees born before 2000', () => {\n    const mockEmployees = [\n      { id: '1', birthDate: '1999-01-01' },\n      { id: '2', birthDate: '1989-01-01' }\n    ];\n\n    service.getEmployeesBornBefore2000().subscribe(employees => {\n      expect(employees.length).toBe(2);\n      expect(employees).toEqual(mockEmployees);\n    });\n\n    const req = httpMock.expectOne('/api/employees/born-before-2000');\n    expect(req.request.method).toBe('GET');\n    req.flush(mockEmployees);\n  });\n});\n=== archivo: src/app/features/empleados/services/orderbyposition.service.ts ===\nimport { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { Employee } from '../models/employee.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class OrderByPositionService {\n  private apiUrl = '/api/employees/order-by-position';\n\n  constructor(private http: HttpClient) { }\n\n  getEmployeesOrderByPosition(): Observable<Employee[]> {\n    return this.http.get<Employee[]>(this.apiUrl);\n  }\n}\n=== archivo: src/app/features/empleados/services/orderbyposition.service.spec.ts ===\nimport { TestBed } from '@angular/core/testing';\nimport { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';\nimport { OrderByPositionService } from './orderbyposition.service';\n\ndescribe('OrderByPositionService', () => {\n  let service: OrderByPositionService;\n  let httpMock: HttpTestingController;\n\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      imports: [HttpClientTestingModule],\n      providers: [OrderByPositionService]\n    });\n\n    service = TestBed.inject(OrderByPositionService);\n    httpMock = TestBed.inject(HttpTestingController);\n  });\n\n  afterEach(() => {\n    httpMock.verify();\n  });\n\n  it('should be created', () => {\n    expect(service).toBeTruthy();\n  });\n\n  it('should fetch employees ordered by position', () => {\n    const mockEmployees = [\n      { id: '1', position: 'Manager' },\n      { id: '2', position: 'Developer' }\n    ];\n\n    service.getEmployeesOrderByPosition().subscribe(employees => {\n      expect(employees.length).toBe(2);\n      expect(employees).toEqual(mockEmployees);\n    });\n\n    const req = httpMock.expectOne('/api/employees/order-by-position');\n    expect(req.request.method).toBe('GET');\n    req.flush(mockEmployees);\n  });\n});\n\n\n--- INSTRUCCIONES ---\n\nEres un generador experto de interfaces Angular. Tu tarea es:\n\n1. Leer la historia de usuario, el diseño visual JSON y el archivo `.ts` generado previamente.\n2. Generar para cada componente Angular nuevo/modificado los archivos:\n  - `.component.html`\n  - `.component.css`\n\n🔧 Requisitos visuales y estructurales:\n\n- Usa los **tokens visuales** provistos en el JSON:\n  - Tipografía: `font.family.primary`, `font.size.body`, `font.size.title`\n  - Colores: `color.primary`, `color.accent`, `color.text`, `color.neutral`, `color.header`\n  - Bordes: `border.radius.button`\n- Aplica los colores correctos en botones (`color.primary`, `color.accent`) y textos (`color.text`).\n- Usa contenedores de tipo **tarjeta** (`card`) para el contenido, como se especifica en el diseño.\n- Si el layout contiene formularios o inputs (como \"Buscar por nombre\"), debes reflejarlos con campos `<input>`, `<form>`, `<label>` y botones con clases adecuadas.\n- Si el layout tiene un `header` con `logo` y navegación, inclúyelo como `<header>` o `<nav>` en la estructura HTML.\n- Las clases CSS deben ser coherentes, reutilizables y limpias. Prefiere nombres genéricos como `.form-field`, `.card`, `.title`, `.button-primary`.\n\nEstructura de salida:\n\n- Cada archivo generado debe ir envuelto entre delimitadores:\n  === archivo: src/app/components/[nombre]/[nombre].component.html ===\n  ...código HTML...\n  === archivo: src/app/components/[nombre]/[nombre].component.css ===\n  ...código CSS...\n\nNo incluyas código TypeScript.\nNo incluyas explicaciones ni comentarios fuera del código.\n\nEOF  \n"
    }
  ],
  "temperature": 0.2
}

{
  "model": "gpt-4",
  "messages": [
    {
      "role": "system",
      "content": "Corrige el código TypeScript para que pasen los tests unitarios. Devuelve cada archivo como: === archivo: ruta/archivo.ts ===\\n[código]"
    },
    {
      "role": "user",
      "content": "Errores:\n\u001b[32m20 06 2025 01:28:12.325:INFO [karma-server]: \u001b[39mKarma v6.4.4 server started at http://localhost:9876/\n\u001b[32m20 06 2025 01:28:12.326:INFO [launcher]: \u001b[39mLaunching browsers ChromeHeadless with concurrency unlimited\n\u001b[91m20 06 2025 01:28:12.327:ERROR [karma-server]: \u001b[39mError: Found 1 load error\n    at Server.<anonymous> (/home/runner/work/demoCodeGenAngular/demoCodeGenAngular/repositorio-base/empleados/node_modules/karma/lib/server.js:243:26)\n    at Object.onceWrapper (node:events:638:28)\n    at Server.emit (node:events:536:35)\n    at emitListeningNT (node:net:1951:10)\n    at process.processTicksAndRejections (node:internal/process/task_queues:81:21)\n\n\nCódigo:\n=== archivo: src/app/features/empleados/services/employee.service.ts ===\nimport { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { Employee } from '../models/employee.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class EmployeeService {\n  private apiUrl = '/api/employees';\n\n  constructor(private http: HttpClient) { }\n\n  deleteEmployee(id: string): Observable<{}> {\n    return this.http.get<Employee>(`${this.apiUrl}/${id}`).pipe(\n      catchError(err => {\n        if (err.status === 404) {\n          return throwError('Employee not found');\n        }\n        return throwError(err);\n      }),\n      switchMap(employee => {\n        if (employee.gender === 'Femenino') {\n          return throwError('Cannot delete female employees');\n        }\n        return this.http.delete(`${this.apiUrl}/${id}`);\n      })\n    );\n  }\n}\n=== archivo: src/app/features/empleados/services/employee.service.spec.ts ===\nimport { TestBed } from '@angular/core/testing';\nimport { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';\nimport { EmployeeService } from './employee.service';\n\ndescribe('EmployeeService', () => {\n  let service: EmployeeService;\n  let httpMock: HttpTestingController;\n\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      imports: [HttpClientTestingModule],\n      providers: [EmployeeService]\n    });\n\n    service = TestBed.inject(EmployeeService);\n    httpMock = TestBed.inject(HttpTestingController);\n  });\n\n  afterEach(() => {\n    httpMock.verify();\n  });\n\n  it('should be created', () => {\n    expect(service).toBeTruthy();\n  });\n\n  it('should throw an error if trying to delete a female employee', () => {\n    const mockEmployee = { id: '1', gender: 'Femenino' };\n\n    service.deleteEmployee('1').subscribe(() => {}, err => {\n      expect(err).toEqual('Cannot delete female employees');\n    });\n\n    const req = httpMock.expectOne('/api/employees/1');\n    expect(req.request.method).toBe('GET');\n    req.flush(mockEmployee);\n  });\n\n  it('should delete a male employee', () => {\n    const mockEmployee = { id: '2', gender: 'Masculino' };\n\n    service.deleteEmployee('2').subscribe(response => {\n      expect(response).toBeNull();\n    });\n\n    const req = httpMock.expectOne('/api/employees/2');\n    expect(req.request.method).toBe('GET');\n    req.flush(mockEmployee);\n\n    const deleteReq = httpMock.expectOne('/api/employees/2');\n    expect(deleteReq.request.method).toBe('DELETE');\n    deleteReq.flush(null);\n  });\n});\n=== archivo: src/app/features/empleados/models/employee.model.ts ===\nexport interface Employee {\n  id: string;\n  gender: string;\n}\n=== archivo: src/app/features/empleados/services/bornbefore2000.service.ts ===\nimport { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { Employee } from '../models/employee.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class BornBefore2000Service {\n  private apiUrl = '/api/employees/born-before-2000';\n\n  constructor(private http: HttpClient) { }\n\n  getEmployeesBornBefore2000(): Observable<Employee[]> {\n    return this.http.get<Employee[]>(this.apiUrl);\n  }\n}\n=== archivo: src/app/features/empleados/services/bornbefore2000.service.spec.ts ===\nimport { TestBed } from '@angular/core/testing';\nimport { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';\nimport { BornBefore2000Service } from './bornbefore2000.service';\n\ndescribe('BornBefore2000Service', () => {\n  let service: BornBefore2000Service;\n  let httpMock: HttpTestingController;\n\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      imports: [HttpClientTestingModule],\n      providers: [BornBefore2000Service]\n    });\n\n    service = TestBed.inject(BornBefore2000Service);\n    httpMock = TestBed.inject(HttpTestingController);\n  });\n\n  afterEach(() => {\n    httpMock.verify();\n  });\n\n  it('should be created', () => {\n    expect(service).toBeTruthy();\n  });\n\n  it('should fetch employees born before 2000', () => {\n    const mockEmployees = [\n      { id: '1', birthDate: '1999-01-01' },\n      { id: '2', birthDate: '1989-01-01' }\n    ];\n\n    service.getEmployeesBornBefore2000().subscribe(employees => {\n      expect(employees.length).toBe(2);\n      expect(employees).toEqual(mockEmployees);\n    });\n\n    const req = httpMock.expectOne('/api/employees/born-before-2000');\n    expect(req.request.method).toBe('GET');\n    req.flush(mockEmployees);\n  });\n});\n=== archivo: src/app/features/empleados/services/orderbyposition.service.ts ===\nimport { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { Employee } from '../models/employee.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class OrderByPositionService {\n  private apiUrl = '/api/employees/order-by-position';\n\n  constructor(private http: HttpClient) { }\n\n  getEmployeesOrderByPosition(): Observable<Employee[]> {\n    return this.http.get<Employee[]>(this.apiUrl);\n  }\n}\n=== archivo: src/app/features/empleados/services/orderbyposition.service.spec.ts ===\nimport { TestBed } from '@angular/core/testing';\nimport { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';\nimport { OrderByPositionService } from './orderbyposition.service';\n\ndescribe('OrderByPositionService', () => {\n  let service: OrderByPositionService;\n  let httpMock: HttpTestingController;\n\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      imports: [HttpClientTestingModule],\n      providers: [OrderByPositionService]\n    });\n\n    service = TestBed.inject(OrderByPositionService);\n    httpMock = TestBed.inject(HttpTestingController);\n  });\n\n  afterEach(() => {\n    httpMock.verify();\n  });\n\n  it('should be created', () => {\n    expect(service).toBeTruthy();\n  });\n\n  it('should fetch employees ordered by position', () => {\n    const mockEmployees = [\n      { id: '1', position: 'Manager' },\n      { id: '2', position: 'Developer' }\n    ];\n\n    service.getEmployeesOrderByPosition().subscribe(employees => {\n      expect(employees.length).toBe(2);\n      expect(employees).toEqual(mockEmployees);\n    });\n\n    const req = httpMock.expectOne('/api/employees/order-by-position');\n    expect(req.request.method).toBe('GET');\n    req.flush(mockEmployees);\n  });\n});\n"
    }
  ],
  "temperature": 0
}
